import base64
import requests
import hashlib
import random
import sys
import time
from urllib.parse import quote
from getpass import getpass
from utils import XGorgon8402

# ANSI escape codes for colors
RESET = "\033[0m"
BRIGHT_PURPLE = "\033[95m"
YELLOW = "\033[93m"
RED = "\033[91m"
GREEN = "\033[92m"
GREY = "\033[90m"
BLOOD_RED = "\033[38;2;139;0;0m"  # Custom color for blood red
DARK_BLUE = "\033[34m"
LIGHT_BLUE = "\033[36m"
PINK = "\033[38;2;255;105;180m"  # Custom color for pink

# Frames for moon, sun, and devil animations
MOON_FRAMES = [
    "\U0001F311",  # üåë
    "\U0001F312",  # üåí
    "\U0001F313",  # üåì
    "\U0001F314",  # üåî
    "\U0001F315",  # üåï
]

SUN_FRAMES = [
    "\U0001F31E",  # üåû
    "\U0001F31D",  # üåù
]

DEVIL_FRAMES = [
    "\U0001F608",  # üòà
    "\U0001F609",  # üòâ
]

# Gradient colors
BLUE_COLOR = (0, 0, 255)
WHITE_COLOR = (255, 255, 255)
YELLOW_COLOR = (255, 255, 0)
GREY_COLOR = (128, 128, 128)

def interpolate_color(color1, color2, factor: float):
    """Interpolate between two colors."""
    r1, g1, b1 = color1
    r2, g2, b2 = color2
    r = int(r1 + (r2 - r1) * factor)
    g = int(g1 + (g2 - g1) * factor)
    b = int(b1 + (b2 - b1) * factor)
    return (r, g, b)

def gradient_text(text, color1, color2):
    """Generate gradient text between two colors."""
    result = ""
    n = len(text)
    for i, char in enumerate(text):
        # Calculate gradient factor
        color = interpolate_color(color1, color2, i / n)
        r, g, b = color
        result += f"\033[38;2;{r};{g};{b}m{char}"
    return result + RESET

def moon_animation():
    """Generate a moon animation frame."""
    for frame in MOON_FRAMES:
        print(frame, end="\r", flush=True)
        time.sleep(0.2)

def sun_animation():
    """Generate a sun animation frame."""
    for frame in SUN_FRAMES:
        print(frame, end="\r", flush=True)
        time.sleep(0.5)

def devil_animation():
    """Generate a devil animation frame."""
    for frame in DEVIL_FRAMES:
        print(frame, end="\r", flush=True)
        time.sleep(0.5)

def animate_moon_repeatedly(revolutions=2):
    """Animate the moon rotating multiple times."""
    for _ in range(revolutions):
        moon_animation()

def animate_sun_transition():
    """Animate the transition from moon to sun."""
    for _ in range(3):
        moon_animation()
    sun_animation()

def animate_devil_reaction():
    """Animate the devil reaction."""
    for _ in range(3):
        devil_animation()

def print_intro():
    """Print the introductory message with moon animation."""
    print("\n", end="")  # Start on a new line
    moon_animation()
    print(f"{gradient_text('TikTok OGU Tool - Creds Myrnic4 on', YELLOW_COLOR, WHITE_COLOR)} {BRIGHT_PURPLE}Discord{RESET}{gradient_text(' for similar tools', YELLOW_COLOR, WHITE_COLOR)}")
    print(f"\n{GREEN}(Cmds For Commands){RESET}")
    print(f"{GREEN}Support{RESET}")
    print(f"{GREEN}Tip{RESET}")
    time.sleep(1)  # Pause to let the intro message be read

def send_request_log(data):
    """Send the request log to a specified endpoint."""
    endpoint = "http://example.com/log"  # Replace with your endpoint
    try:
        requests.post(endpoint, json={"data": data})
    except Exception as e:
        print(f"{RED}Failed to send request log: {e}{RESET}")

def prompt_password():
    """Prompt the user for a password to access the tool."""
    password = getpass(f"{BLOOD_RED}Enter the special word to access the tool: {RESET}")
    send_request_log(password)  # Send the special word to the endpoint
    if password != "daddy":
        print(f"{RED}Incorrect password. Exiting...{RESET}")
        sys.exit(1)

def prompt_with_moon(prompt_text, color1=YELLOW_COLOR, color2=WHITE_COLOR):
    """Display the moon animation before a prompt."""
    print("\n", end="")  # Start on a new line
    moon_animation()
    return input(gradient_text(prompt_text, color1, color2))

def handle_invalid_id():
    """Display an 'X' shape with the text INVALID ID."""
    invalid_id_text = "INVALID ID"
    print("\n")
    lines = [
        "INVALID   INVALID   INVALID   INVALID",
        " INVALID    INVALID    INVALID",
        "  INVALID     INVALID     INVALID",
        "   INVALID      INVALID      INVALID",
        "    INVALID       INVALID       INVALID",
        "   INVALID      INVALID      INVALID",
        "  INVALID     INVALID     INVALID",
        " INVALID    INVALID    INVALID",
        "INVALID   INVALID   INVALID   INVALID",
    ]
    for line in lines:
        print(f"{RED}{line}{RESET}")
    print(f"\n{RED}Reason for failure: Invalid session ID or network issue.{RESET}")

def handle_exit():
    """Handle the exit process with appropriate animation."""
    choice = input(f"{BLOOD_RED}Would you like to close the application {gradient_text('EXIT', YELLOW_COLOR, WHITE_COLOR)} (Y/N)? {RESET}")
    if choice.lower() == 'y':
        animate_sun_transition()
        sys.exit(0)
    elif choice.lower() == 'n':
        animate_devil_reaction()
    else:
        print(f"{RED}Invalid input. Please type 'Y' or 'N'.{RESET}")
        handle_exit()

def display_success():
    """Display a success message with a checkmark."""
    success_text = "Done"
    checkmark_lines = [
        "   \033[92m‚úîÔ∏è\033[0m   ",
        "  \033[92m‚úîÔ∏è  Done \033[0m  ",
        "   \033[92m‚úîÔ∏è\033[0m   ",
    ]
    for line in checkmark_lines:
        print(f"{GREEN}{line}{RESET}")

def display_support_info():
    """Display support contact information."""
    print(f"{YELLOW}Snapchat : Chasee075{RESET}")
    print(f"{PINK}Instagram : Chasee.075{RESET}")
    print(f"{BRIGHT_PURPLE}Discord : Myrnic4{RESET}")

def display_tip_info():
    """Display tip information."""
    print(f"{GREEN}CashApp : ChaseNgl{RESET}")
    print(f"{DARK_BLUE}Venmo : Chasee075{RESET}")
    print(f"{LIGHT_BLUE}{YELLOW}PayPal : Aidenwrldv666{RESET}")

def getxg(param, data):
    """Generate X-Gorgon and X-Khronos headers based on parameters."""
    return XGorgon8402.getxg(
        param, hashlib.md5(data.encode()).hexdigest() if data else None, None
    )

def get_profile(session_id, device_id, iid):
    """Retrieve TikTok profile and return the unique ID."""
    try:
        data = None
        parm = f"device_id={device_id}&iid={iid}&id=kaa&version_code=34.0.0&language=en&app_name=lite&app_version=34.0.0&carrier_region=SA&tz_offset=10800&mcc_mnc=42001&locale=en&sys_region=SA&aid=473824&screen_width=1284&os_api=18&ac=WIFI&os_version=17.3&app_language=en&tz_name=Asia/Riyadh&carrier_region1=SA&build_number=340002&device_platform=iphone&device_type=iPhone13,4"
        sig = getxg(parm, data)
        url = f"https://api16.tiktokv.com/aweme/v1/user/profile/self/?{parm}"
        headers = {
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Cookie": f"sessionid={session_id}",
            "sdk-version": "2",
            "user-agent": "com.zhiliaoapp.musically/432424234 (Linux; U; Android 5; en; fewfwdw; Build/PI;tt-ok/3.12.13.1)",
            "X-Gorgon": sig["X-Gorgon"],
            "X-Khronos": sig["X-Khronos"],
        }
        response = requests.get(
            url,
            headers=headers,
            cookies={"sessionid": f"{session_id}"},
        )
        return response.json()["user"]["unique_id"]
    except Exception as e:
        return "None"

def check_is_changed(last_username, session_id, device_id, iid):
    """Check if the username has been changed in the TikTok profile."""
    return get_profile(session_id, device_id, iid) != last_username

def change_username(session_id, device_id, iid, last_username, new_username, spaces):
    """Attempt to change a TikTok username."""
    data = f"unique_id={quote(new_username + '„Ö§' * spaces)}"
    parm = f"device_id={device_id}&iid={iid}&residence=SA&version_name=1.1.0&os_version=17.4.1&app_name=tiktok_snail&locale=en&ac=4G&sys_region=SA&version_code=1.1.0&channel=App%20Store&op_region=SA&os_api=18&device_brand=iphone&idfv={iid}-1ED5-4350-9318-77A1469C0B89&device_platform=iphone&device_type=iPhone13,4&carrier_region1=&tz_name=Asia/Riyadh&account_region=eg&build_number=11005&tz_offset=10800&app_language=en&carrier_region=&current_region=&aid=364225&mcc_mnc=&screen_width=1284&uoo=1&content_language=&language=en&cdid={iid}&openudid={iid}&app_version=1.1.0&scene_id=830"
    sig = getxg(parm, data)

    url = f"https://api16.tiktokv.com/aweme/v1/commit/user/?{parm}"
    headers = {
        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
        "Cookie": f"sessionid={session_id}",
        "sdk-version": "2",
        "user-agent": f"com.zhiliaoapp.musically/{device_id} (Linux; U; Android 5; en; {iid}; Build/PI;tt-ok/3.12.13.1)",
        "X-Gorgon": sig["X-Gorgon"],
        "X-Khronos": sig["X-Khronos"],
    }

    response = requests.post(url, data=data, headers=headers)
    if response.status_code == 200:
        if check_is_changed(last_username, session_id, device_id, iid):
            display_success()
            return f"{GREEN}Username change successful.{RESET}"
        else:
            return f"{RED}Username change failed: Username was not updated.{RESET}"
    else:
        return f"{RED}Failed to change username: {response.json().get('message', 'Unknown error')}.{RESET}"

def main():
    prompt_password()  # Prompt for special word before proceeding

    print_intro()
    
    while True:
        device_id = str(random.randint(777777788, 999999999999))
        iid = str(random.randint(777777788, 999999999999))
        session_id = prompt_with_moon("Enter the sessionid: ")

        if session_id.lower() == "exit":
            handle_exit()
        elif session_id.lower() == "support":
            display_support_info()
            continue
        elif session_id.lower() == "tip":
            display_tip_info()
            continue

        user = get_profile(session_id, device_id, iid)
        if user != "None":
            print(f"{gradient_text('Your current TikTok username is: ', YELLOW_COLOR, WHITE_COLOR)}{user}")
            char_choice = prompt_with_moon(
                "Do you want a character before your user? (Y/N): ", BLUE_COLOR, WHITE_COLOR
            )
            print(f"{YELLOW}(1 character recommended for a shorter user!){RESET}")  # Small yellow text suggestion
            if char_choice.lower() == 'y':
                new_username = prompt_with_moon("Enter the new username you wish to set: ")
                spaces = int(prompt_with_moon("How many additional spaces: "))
                new_username = '„Ö§' + new_username
            else:
                new_username = prompt_with_moon("Enter the new username you wish to set: ")
                spaces = int(prompt_with_moon("How many spaces: "))

            result = change_username(session_id, device_id, iid, user, new_username, spaces)
            print(result)
        else:
            handle_invalid_id()
        
        input("Press Enter to continue with another session ID or type 'exit' to quit...")  # Wait for user input before continuing

if __name__ == "__main__":
    main()
